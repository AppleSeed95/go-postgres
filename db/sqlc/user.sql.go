// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    id,
    username,
    email,
    password 
) VALUES (
    $1,
    $2,
    $3,
    $4
) 
RETURNING id, username, email, password, bio, image, created_at, updated_at
`

type CreateUserParams struct {
	ID       string `json:"id"`
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Bio,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const doesUserExist = `-- name: DoesUserExist :one
SELECT EXISTS (
    SELECT 1
    FROM users
    WHERE id = $1
)
`

func (q *Queries) DoesUserExist(ctx context.Context, id string) (bool, error) {
	row := q.db.QueryRow(ctx, doesUserExist, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const followUser = `-- name: FollowUser :exec
INSERT INTO follows (
    follower_id,
    following_id
) VALUES (
    $1,
    $2
)
`

type FollowUserParams struct {
	FollowerID  string `json:"follower_id"`
	FollowingID string `json:"following_id"`
}

func (q *Queries) FollowUser(ctx context.Context, arg FollowUserParams) error {
	_, err := q.db.Exec(ctx, followUser, arg.FollowerID, arg.FollowingID)
	return err
}

const getFollowees = `-- name: GetFollowees :many
SELECT follower_id, following_id
FROM follows
WHERE follower_id = $1
`

func (q *Queries) GetFollowees(ctx context.Context, followerID string) ([]*Follow, error) {
	rows, err := q.db.Query(ctx, getFollowees, followerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Follow
	for rows.Next() {
		var i Follow
		if err := rows.Scan(&i.FollowerID, &i.FollowingID); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, username, email, password, bio, image, created_at, updated_at
FROM users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id string) (*User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Bio,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password, bio, image, created_at, updated_at
FROM users 
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Bio,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, password, bio, image, created_at, updated_at
FROM users
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Bio,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const isFollowing = `-- name: IsFollowing :one
SELECT EXISTS (
    SELECT 1
    FROM follows
    WHERE follower_id = $1
    AND following_id = $2
)
`

type IsFollowingParams struct {
	FollowerID  string `json:"follower_id"`
	FollowingID string `json:"following_id"`
}

func (q *Queries) IsFollowing(ctx context.Context, arg IsFollowingParams) (bool, error) {
	row := q.db.QueryRow(ctx, isFollowing, arg.FollowerID, arg.FollowingID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const unfollowUser = `-- name: UnfollowUser :exec
DELETE FROM follows
WHERE follower_id = $1
AND following_id = $2
`

type UnfollowUserParams struct {
	FollowerID  string `json:"follower_id"`
	FollowingID string `json:"following_id"`
}

func (q *Queries) UnfollowUser(ctx context.Context, arg UnfollowUserParams) error {
	_, err := q.db.Exec(ctx, unfollowUser, arg.FollowerID, arg.FollowingID)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET username = coalesce($1, username),
    email = coalesce($2, email),
    password = coalesce($3, password),
    bio = coalesce($4, bio),
    image = coalesce($5, image),
    updated_at = now()
WHERE id = $6
RETURNING id, username, email, password, bio, image, created_at, updated_at
`

type UpdateUserParams struct {
	Username *string `json:"username"`
	Email    *string `json:"email"`
	Password *string `json:"password"`
	Bio      *string `json:"bio"`
	Image    *string `json:"image"`
	ID       string  `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Bio,
		arg.Image,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Bio,
		&i.Image,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
