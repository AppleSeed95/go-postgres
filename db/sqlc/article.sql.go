// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: article.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const createArticle = `-- name: CreateArticle :one
INSERT INTO articles (
    author_id,
    slug,
    title,
    description,
    body
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
RETURNING id, author_id, slug, title, description, body, created_at, updated_at
`

type CreateArticleParams struct {
	AuthorID    string `json:"author_id"`
	Slug        string `json:"slug"`
	Title       string `json:"title"`
	Description string `json:"description"`
	Body        string `json:"body"`
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) (*Article, error) {
	row := q.db.QueryRowContext(ctx, createArticle,
		arg.AuthorID,
		arg.Slug,
		arg.Title,
		arg.Description,
		arg.Body,
	)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Slug,
		&i.Title,
		&i.Description,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const createArticleTag = `-- name: CreateArticleTag :one
INSERT INTO article_tags (
    article_id,
    tag_id
) VALUES (
    $1,
    $2
)
RETURNING article_id, tag_id
`

type CreateArticleTagParams struct {
	ArticleID string `json:"article_id"`
	TagID     string `json:"tag_id"`
}

func (q *Queries) CreateArticleTag(ctx context.Context, arg CreateArticleTagParams) (*ArticleTag, error) {
	row := q.db.QueryRowContext(ctx, createArticleTag, arg.ArticleID, arg.TagID)
	var i ArticleTag
	err := row.Scan(&i.ArticleID, &i.TagID)
	return &i, err
}

const createTag = `-- name: CreateTag :one
INSERT INTO tags (
    name
) VALUES (
    $1
)
ON CONFLICT 
    ON CONSTRAINT tags_name_key
DO 
    UPDATE SET name = $1
RETURNING id
`

func (q *Queries) CreateTag(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRowContext(ctx, createTag, name)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getArticleBySlug = `-- name: GetArticleBySlug :one
SELECT a.id,
       a.slug,
       a.title,
       a.description,
       a.body,
       array_agg(t.name)::varchar[] as tag_list,
       a.created_at,
       a.updated_at, 
       count(f.article_id) as favorites_count,
       u.username,
       u.bio,
       u.image
FROM articles a, tags t
LEFT JOIN users u ON a.author_id = u.id
LEFT JOIN favorites f ON a.id = f.article_id
LEFT JOIN article_tags a_t ON a.id = a_t.article_id
WHERE slug = $1
`

type GetArticleBySlugRow struct {
	ID             string         `json:"id"`
	Slug           string         `json:"slug"`
	Title          string         `json:"title"`
	Description    string         `json:"description"`
	Body           string         `json:"body"`
	TagList        []string       `json:"tag_list"`
	CreatedAt      time.Time      `json:"created_at"`
	UpdatedAt      time.Time      `json:"updated_at"`
	FavoritesCount int64          `json:"favorites_count"`
	Username       sql.NullString `json:"username"`
	Bio            sql.NullString `json:"bio"`
	Image          sql.NullString `json:"image"`
}

func (q *Queries) GetArticleBySlug(ctx context.Context, slug string) (*GetArticleBySlugRow, error) {
	row := q.db.QueryRowContext(ctx, getArticleBySlug, slug)
	var i GetArticleBySlugRow
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.Description,
		&i.Body,
		pq.Array(&i.TagList),
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FavoritesCount,
		&i.Username,
		&i.Bio,
		&i.Image,
	)
	return &i, err
}
