// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: article.sql

package db

import (
	"context"
	"time"
)

const createArticle = `-- name: CreateArticle :one
INSERT INTO articles (
    author_id,
    slug,
    title,
    description,
    body
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
)
RETURNING id, author_id, slug, title, description, body, created_at, updated_at
`

type CreateArticleParams struct {
	AuthorID    string `json:"author_id"`
	Slug        string `json:"slug"`
	Title       string `json:"title"`
	Description string `json:"description"`
	Body        string `json:"body"`
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) (*Article, error) {
	row := q.db.QueryRow(ctx, createArticle,
		arg.AuthorID,
		arg.Slug,
		arg.Title,
		arg.Description,
		arg.Body,
	)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Slug,
		&i.Title,
		&i.Description,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const createArticleTag = `-- name: CreateArticleTag :one
INSERT INTO article_tags (
    article_id,
    tag_id
) VALUES (
    $1,
    $2
)
RETURNING article_id, tag_id
`

type CreateArticleTagParams struct {
	ArticleID string `json:"article_id"`
	TagID     string `json:"tag_id"`
}

func (q *Queries) CreateArticleTag(ctx context.Context, arg CreateArticleTagParams) (*ArticleTag, error) {
	row := q.db.QueryRow(ctx, createArticleTag, arg.ArticleID, arg.TagID)
	var i ArticleTag
	err := row.Scan(&i.ArticleID, &i.TagID)
	return &i, err
}

const createTag = `-- name: CreateTag :one
INSERT INTO tags (
    name
) VALUES (
    $1
)
ON CONFLICT 
    ON CONSTRAINT tags_name_key
DO 
    UPDATE SET name = $1
RETURNING id
`

func (q *Queries) CreateTag(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRow(ctx, createTag, name)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getArticleBySlug = `-- name: GetArticleBySlug :one
SELECT a.id,
       a.slug,
       a.title,
       a.description,
       a.body,
       coalesce(array_agg(t.name), array['default']::varchar[]) AS tag_list,
       a.created_at,
       a.updated_at,
       coalesce(count(f.article_id), 0)::bigint as favorites_count, 
       u.username,
       u.bio,
       u.image
FROM (
  SELECT id, author_id, slug, title, description, body, created_at, updated_at
  FROM articles
  WHERE slug = $1
  LIMIT 1
) a
LEFT JOIN (
  SELECT article_id, COUNT(*) AS favorites_count
  FROM favorites
  GROUP BY article_id
) f ON a.id = f.article_id
LEFT JOIN users u ON a.author_id = u.id
LEFT JOIN article_tags art ON a.id = art.article_id
LEFT JOIN tags t ON art.tag_id = t.id
GROUP BY a.id, a.slug, a.title, a.description, a.body, a.created_at, a.updated_at, u.id, f.favorites_count
`

type GetArticleBySlugRow struct {
	ID             string      `json:"id"`
	Slug           string      `json:"slug"`
	Title          string      `json:"title"`
	Description    string      `json:"description"`
	Body           string      `json:"body"`
	TagList        interface{} `json:"tag_list"`
	CreatedAt      time.Time   `json:"created_at"`
	UpdatedAt      time.Time   `json:"updated_at"`
	FavoritesCount int64       `json:"favorites_count"`
	Username       *string     `json:"username"`
	Bio            *string     `json:"bio"`
	Image          *string     `json:"image"`
}

func (q *Queries) GetArticleBySlug(ctx context.Context, slug string) (*GetArticleBySlugRow, error) {
	row := q.db.QueryRow(ctx, getArticleBySlug, slug)
	var i GetArticleBySlugRow
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Title,
		&i.Description,
		&i.Body,
		&i.TagList,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FavoritesCount,
		&i.Username,
		&i.Bio,
		&i.Image,
	)
	return &i, err
}

const getArticleIDBySlug = `-- name: GetArticleIDBySlug :one
SELECT id
FROM articles
WHERE slug = $1
`

func (q *Queries) GetArticleIDBySlug(ctx context.Context, slug string) (string, error) {
	row := q.db.QueryRow(ctx, getArticleIDBySlug, slug)
	var id string
	err := row.Scan(&id)
	return id, err
}

const updateArticle = `-- name: UpdateArticle :one
UPDATE articles
SET slug = coalesce($1, slug),
    title = coalesce($2, title),
    description = coalesce($3, description),
    body = coalesce($4, body),
    updated_at = now()
WHERE id = $5 and author_id = $6
RETURNING id, author_id, slug, title, description, body, created_at, updated_at
`

type UpdateArticleParams struct {
	Slug        *string `json:"slug"`
	Title       *string `json:"title"`
	Description *string `json:"description"`
	Body        *string `json:"body"`
	ID          string  `json:"id"`
	AuthorID    string  `json:"author_id"`
}

func (q *Queries) UpdateArticle(ctx context.Context, arg UpdateArticleParams) (*Article, error) {
	row := q.db.QueryRow(ctx, updateArticle,
		arg.Slug,
		arg.Title,
		arg.Description,
		arg.Body,
		arg.ID,
		arg.AuthorID,
	)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Slug,
		&i.Title,
		&i.Description,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
